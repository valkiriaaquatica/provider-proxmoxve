/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FeaturesObservation struct {
	Fuse *bool `json:"fuse,omitempty" tf:"fuse,omitempty"`

	Keyctl *bool `json:"keyctl,omitempty" tf:"keyctl,omitempty"`

	Mknod *bool `json:"mknod,omitempty" tf:"mknod,omitempty"`

	Mount *string `json:"mount,omitempty" tf:"mount,omitempty"`

	Nesting *bool `json:"nesting,omitempty" tf:"nesting,omitempty"`
}

type FeaturesParameters struct {

	// +kubebuilder:validation:Optional
	Fuse *bool `json:"fuse,omitempty" tf:"fuse,omitempty"`

	// +kubebuilder:validation:Optional
	Keyctl *bool `json:"keyctl,omitempty" tf:"keyctl,omitempty"`

	// +kubebuilder:validation:Optional
	Mknod *bool `json:"mknod,omitempty" tf:"mknod,omitempty"`

	// +kubebuilder:validation:Optional
	Mount *string `json:"mount,omitempty" tf:"mount,omitempty"`

	// +kubebuilder:validation:Optional
	Nesting *bool `json:"nesting,omitempty" tf:"nesting,omitempty"`
}

type LxcObservation struct {
	Arch *string `json:"arch,omitempty" tf:"arch,omitempty"`

	Bwlimit *float64 `json:"bwlimit,omitempty" tf:"bwlimit,omitempty"`

	Clone *string `json:"clone,omitempty" tf:"clone,omitempty"`

	CloneStorage *string `json:"cloneStorage,omitempty" tf:"clone_storage,omitempty"`

	Cmode *string `json:"cmode,omitempty" tf:"cmode,omitempty"`

	Console *bool `json:"console,omitempty" tf:"console,omitempty"`

	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	Cpulimit *float64 `json:"cpulimit,omitempty" tf:"cpulimit,omitempty"`

	Cpuunits *float64 `json:"cpuunits,omitempty" tf:"cpuunits,omitempty"`

	// The node the qemu guest is currently on.
	CurrentNode *string `json:"currentNode,omitempty" tf:"current_node,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Features []FeaturesObservation `json:"features,omitempty" tf:"features,omitempty"`

	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	Full *bool `json:"full,omitempty" tf:"full,omitempty"`

	Hagroup *string `json:"hagroup,omitempty" tf:"hagroup,omitempty"`

	Hastate *string `json:"hastate,omitempty" tf:"hastate,omitempty"`

	Hookscript *string `json:"hookscript,omitempty" tf:"hookscript,omitempty"`

	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IgnoreUnpackErrors *bool `json:"ignoreUnpackErrors,omitempty" tf:"ignore_unpack_errors,omitempty"`

	Lock *string `json:"lock,omitempty" tf:"lock,omitempty"`

	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	Mountpoint []MountpointObservation `json:"mountpoint,omitempty" tf:"mountpoint,omitempty"`

	Nameserver *string `json:"nameserver,omitempty" tf:"nameserver,omitempty"`

	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	Onboot *bool `json:"onboot,omitempty" tf:"onboot,omitempty"`

	Ostemplate *string `json:"ostemplate,omitempty" tf:"ostemplate,omitempty"`

	Ostype *string `json:"ostype,omitempty" tf:"ostype,omitempty"`

	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	Protection *bool `json:"protection,omitempty" tf:"protection,omitempty"`

	Restore *bool `json:"restore,omitempty" tf:"restore,omitempty"`

	Rootfs []RootfsObservation `json:"rootfs,omitempty" tf:"rootfs,omitempty"`

	SSHPublicKeys *string `json:"sshPublicKeys,omitempty" tf:"ssh_public_keys,omitempty"`

	Searchdomain *string `json:"searchdomain,omitempty" tf:"searchdomain,omitempty"`

	Start *bool `json:"start,omitempty" tf:"start,omitempty"`

	Startup *string `json:"startup,omitempty" tf:"startup,omitempty"`

	Swap *float64 `json:"swap,omitempty" tf:"swap,omitempty"`

	Tags *string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The node the lxc guest goes to.
	TargetNode *string `json:"targetNode,omitempty" tf:"target_node,omitempty"`

	Template *bool `json:"template,omitempty" tf:"template,omitempty"`

	Tty *float64 `json:"tty,omitempty" tf:"tty,omitempty"`

	Unique *bool `json:"unique,omitempty" tf:"unique,omitempty"`

	Unprivileged *bool `json:"unprivileged,omitempty" tf:"unprivileged,omitempty"`

	Unused []*string `json:"unused,omitempty" tf:"unused,omitempty"`

	// The VM identifier in proxmox (100-999999999)
	Vmid *float64 `json:"vmid,omitempty" tf:"vmid,omitempty"`
}

type LxcParameters struct {

	// +kubebuilder:validation:Optional
	Arch *string `json:"arch,omitempty" tf:"arch,omitempty"`

	// +kubebuilder:validation:Optional
	Bwlimit *float64 `json:"bwlimit,omitempty" tf:"bwlimit,omitempty"`

	// +kubebuilder:validation:Optional
	Clone *string `json:"clone,omitempty" tf:"clone,omitempty"`

	// +kubebuilder:validation:Optional
	CloneStorage *string `json:"cloneStorage,omitempty" tf:"clone_storage,omitempty"`

	// +kubebuilder:validation:Optional
	Cmode *string `json:"cmode,omitempty" tf:"cmode,omitempty"`

	// +kubebuilder:validation:Optional
	Console *bool `json:"console,omitempty" tf:"console,omitempty"`

	// +kubebuilder:validation:Optional
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// +kubebuilder:validation:Optional
	Cpulimit *float64 `json:"cpulimit,omitempty" tf:"cpulimit,omitempty"`

	// +kubebuilder:validation:Optional
	Cpuunits *float64 `json:"cpuunits,omitempty" tf:"cpuunits,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Features []FeaturesParameters `json:"features,omitempty" tf:"features,omitempty"`

	// +kubebuilder:validation:Optional
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// +kubebuilder:validation:Optional
	Full *bool `json:"full,omitempty" tf:"full,omitempty"`

	// +kubebuilder:validation:Optional
	Hagroup *string `json:"hagroup,omitempty" tf:"hagroup,omitempty"`

	// +kubebuilder:validation:Optional
	Hastate *string `json:"hastate,omitempty" tf:"hastate,omitempty"`

	// +kubebuilder:validation:Optional
	Hookscript *string `json:"hookscript,omitempty" tf:"hookscript,omitempty"`

	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// +kubebuilder:validation:Optional
	IgnoreUnpackErrors *bool `json:"ignoreUnpackErrors,omitempty" tf:"ignore_unpack_errors,omitempty"`

	// +kubebuilder:validation:Optional
	Lock *string `json:"lock,omitempty" tf:"lock,omitempty"`

	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// +kubebuilder:validation:Optional
	Mountpoint []MountpointParameters `json:"mountpoint,omitempty" tf:"mountpoint,omitempty"`

	// +kubebuilder:validation:Optional
	Nameserver *string `json:"nameserver,omitempty" tf:"nameserver,omitempty"`

	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// +kubebuilder:validation:Optional
	Onboot *bool `json:"onboot,omitempty" tf:"onboot,omitempty"`

	// +kubebuilder:validation:Optional
	Ostemplate *string `json:"ostemplate,omitempty" tf:"ostemplate,omitempty"`

	// +kubebuilder:validation:Optional
	Ostype *string `json:"ostype,omitempty" tf:"ostype,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	// +kubebuilder:validation:Optional
	Protection *bool `json:"protection,omitempty" tf:"protection,omitempty"`

	// +kubebuilder:validation:Optional
	Restore *bool `json:"restore,omitempty" tf:"restore,omitempty"`

	// +kubebuilder:validation:Optional
	Rootfs []RootfsParameters `json:"rootfs,omitempty" tf:"rootfs,omitempty"`

	// +kubebuilder:validation:Optional
	SSHPublicKeys *string `json:"sshPublicKeys,omitempty" tf:"ssh_public_keys,omitempty"`

	// +kubebuilder:validation:Optional
	Searchdomain *string `json:"searchdomain,omitempty" tf:"searchdomain,omitempty"`

	// +kubebuilder:validation:Optional
	Start *bool `json:"start,omitempty" tf:"start,omitempty"`

	// +kubebuilder:validation:Optional
	Startup *string `json:"startup,omitempty" tf:"startup,omitempty"`

	// +kubebuilder:validation:Optional
	Swap *float64 `json:"swap,omitempty" tf:"swap,omitempty"`

	// +kubebuilder:validation:Optional
	Tags *string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The node the lxc guest goes to.
	// +kubebuilder:validation:Optional
	TargetNode *string `json:"targetNode,omitempty" tf:"target_node,omitempty"`

	// +kubebuilder:validation:Optional
	Template *bool `json:"template,omitempty" tf:"template,omitempty"`

	// +kubebuilder:validation:Optional
	Tty *float64 `json:"tty,omitempty" tf:"tty,omitempty"`

	// +kubebuilder:validation:Optional
	Unique *bool `json:"unique,omitempty" tf:"unique,omitempty"`

	// +kubebuilder:validation:Optional
	Unprivileged *bool `json:"unprivileged,omitempty" tf:"unprivileged,omitempty"`

	// The VM identifier in proxmox (100-999999999)
	// +kubebuilder:validation:Optional
	Vmid *float64 `json:"vmid,omitempty" tf:"vmid,omitempty"`
}

type MountpointObservation struct {
	ACL *bool `json:"acl,omitempty" tf:"acl,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Mp *string `json:"mp,omitempty" tf:"mp,omitempty"`

	Quota *bool `json:"quota,omitempty" tf:"quota,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Slot *float64 `json:"slot,omitempty" tf:"slot,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Volume *string `json:"volume,omitempty" tf:"volume,omitempty"`
}

type MountpointParameters struct {

	// +kubebuilder:validation:Optional
	ACL *bool `json:"acl,omitempty" tf:"acl,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Mp *string `json:"mp" tf:"mp,omitempty"`

	// +kubebuilder:validation:Optional
	Quota *bool `json:"quota,omitempty" tf:"quota,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	Slot *float64 `json:"slot" tf:"slot,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Volume *string `json:"volume,omitempty" tf:"volume,omitempty"`
}

type NetworkObservation struct {
	Bridge *string `json:"bridge,omitempty" tf:"bridge,omitempty"`

	Firewall *bool `json:"firewall,omitempty" tf:"firewall,omitempty"`

	Gw *string `json:"gw,omitempty" tf:"gw,omitempty"`

	Gw6 *string `json:"gw6,omitempty" tf:"gw6,omitempty"`

	Hwaddr *string `json:"hwaddr,omitempty" tf:"hwaddr,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	Ip6 *string `json:"ip6,omitempty" tf:"ip6,omitempty"`

	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`

	Tag *float64 `json:"tag,omitempty" tf:"tag,omitempty"`

	Trunks *string `json:"trunks,omitempty" tf:"trunks,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NetworkParameters struct {

	// +kubebuilder:validation:Optional
	Bridge *string `json:"bridge,omitempty" tf:"bridge,omitempty"`

	// +kubebuilder:validation:Optional
	Firewall *bool `json:"firewall,omitempty" tf:"firewall,omitempty"`

	// +kubebuilder:validation:Optional
	Gw *string `json:"gw,omitempty" tf:"gw,omitempty"`

	// +kubebuilder:validation:Optional
	Gw6 *string `json:"gw6,omitempty" tf:"gw6,omitempty"`

	// +kubebuilder:validation:Optional
	Hwaddr *string `json:"hwaddr,omitempty" tf:"hwaddr,omitempty"`

	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	Ip6 *string `json:"ip6,omitempty" tf:"ip6,omitempty"`

	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *float64 `json:"tag,omitempty" tf:"tag,omitempty"`

	// +kubebuilder:validation:Optional
	Trunks *string `json:"trunks,omitempty" tf:"trunks,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RootfsObservation struct {
	ACL *bool `json:"acl,omitempty" tf:"acl,omitempty"`

	Quota *bool `json:"quota,omitempty" tf:"quota,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Ro *bool `json:"ro,omitempty" tf:"ro,omitempty"`

	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Volume *string `json:"volume,omitempty" tf:"volume,omitempty"`
}

type RootfsParameters struct {

	// +kubebuilder:validation:Optional
	ACL *bool `json:"acl,omitempty" tf:"acl,omitempty"`

	// +kubebuilder:validation:Optional
	Quota *bool `json:"quota,omitempty" tf:"quota,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Ro *bool `json:"ro,omitempty" tf:"ro,omitempty"`

	// +kubebuilder:validation:Optional
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// +kubebuilder:validation:Required
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

// LxcSpec defines the desired state of Lxc
type LxcSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LxcParameters `json:"forProvider"`
}

// LxcStatus defines the observed state of Lxc.
type LxcStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LxcObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Lxc is the Schema for the Lxcs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxve}
type Lxc struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LxcSpec   `json:"spec"`
	Status            LxcStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LxcList contains a list of Lxcs
type LxcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Lxc `json:"items"`
}

// Repository type metadata.
var (
	Lxc_Kind             = "Lxc"
	Lxc_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Lxc_Kind}.String()
	Lxc_KindAPIVersion   = Lxc_Kind + "." + CRDGroupVersion.String()
	Lxc_GroupVersionKind = CRDGroupVersion.WithKind(Lxc_Kind)
)

func init() {
	SchemeBuilder.Register(&Lxc{}, &LxcList{})
}
